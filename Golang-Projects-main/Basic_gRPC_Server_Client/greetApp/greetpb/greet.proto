syntax = "proto3";

//package name
package greet;

//this is useful, while rendering golang code with packagename ending with pb
// so proto code pkg is greet then generated golang code pkg is greetpb
option go_package="/greetpb";


message Greeting{
    string first_name = 1;
    string last_name = 2;
}

// Greet Request
message GreetRequest{
    Greeting greeting = 1;
}

// Greet Response
message GreetResponse{
    string result = 1;
}

// GreetMany Request
message GreetManyRequest{
    Greeting greeting = 1;
}

// GreetMany Response
message GreetManyResponse{
    string result = 1;
}

// LongGreet Request
message LongGreetRequest{
    Greeting greeting = 1;
}

// LongGreet Response
message LongGreetResponse{
    string result = 1;
}

// GreetEveryone Request
message GreetEveryoneRequest{
    Greeting greeting = 1;
}

// GreetEveryone Response
message GreetEveryoneResponse{
    string result = 1;
}

// It's kind of end point
service GreetService{
    // Unary
    rpc Greet(GreetRequest) returns (GreetResponse);
    // Server Streaming
    rpc GreetMany(GreetManyRequest) returns (stream GreetManyResponse);
    // Client Streaming
    rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse);
    // Bi-Directional Streaming
    rpc GreetEveryone(stream GreetEveryoneRequest) returns (stream GreetEveryoneResponse);

}